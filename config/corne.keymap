/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&lt {
    flavor = "hold-preferred";
};

/ {
    behaviors {
        hrmr: hrmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HRMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <125>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <39 40 41 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
        };

        hrml: hrml {
            compatible = "zmk,behavior-hold-tap";
            label = "HRML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <125>;
            flavor = "balanced";
            hold-trigger-key-positions = <36 37 38 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
            hold-trigger-on-release;
        };

        tmtl: tmtl {
            compatible = "zmk,behavior-hold-tap";
            label = "TMTL";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <125>;
            flavor = "hold-preferred";
            retro-tap;
            hold-trigger-key-positions = <36 37 38 39 40 41>;
        };

        tmtr: tmtr {
            compatible = "zmk,behavior-hold-tap";
            label = "TMTR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <125>;
            flavor = "hold-preferred";
            hold-trigger-key-positions = <39 40 41 36 37 38>;
            retro-tap;
        };

        ltl: ltl {
            compatible = "zmk,behavior-hold-tap";
            label = "LTL";
            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <(-1)>;
            flavor = "hold-preferred";
            hold-trigger-key-positions = <39 40 41 36 37 38>;
            retro-tap;
            bindings = <&mt>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_magic_caps {
            bindings = <&caps_word>;
            key-positions = <35 24>;
            layers = <0>;
            require-prior-idle-ms = <150>;
            timeout-ms = <18>;
        };

        combos_shutdown {
            bindings = <&kp C_POWER>;
            key-positions = <0 11>;
            layers = <0>;
            require-prior-idle-ms = <150>;
            timeout-ms = <18>;
        };

        all {
            bindings = <&kp LC(A)>;
            key-positions = <13 14>;
            layers = <0>;
            timeout-ms = <18>;
            require-prior-idle-ms = <150>;
        };

        copy {
            bindings = <&kp LC(C)>;
            key-positions = <26 27>;
            layers = <0>;
            timeout-ms = <18>;
            require-prior-idle-ms = <150>;
        };

        paste {
            bindings = <&kp LC(V)>;
            key-positions = <27 28>;
            layers = <0>;
            timeout-ms = <18>;
            require-prior-idle-ms = <150>;
        };

        cut {
            bindings = <&kp LC(X)>;
            key-positions = <25 26>;
            layers = <0>;
            timeout-ms = <18>;
            require-prior-idle-ms = <150>;
        };

        undo {
            bindings = <&kp LC(Z)>;
            key-positions = <24 25>;
            layers = <0>;
            timeout-ms = <18>;
            require-prior-idle-ms = <150>;
        };

        combo_esc {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
            layers = <0>;
            timeout-ms = <18>;
            require-prior-idle-ms = <150>;
        };

        toggle_functions {
            bindings = <&tog 2>;
            key-positions = <4 5>;
            layers = <0 1 2 3>;
            timeout-ms = <18>;
            require-prior-idle-ms = <150>;
        };

        combo_lp {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <8 9>;
            timeout-ms = <18>;
            require-prior-idle-ms = <150>;
        };

        combo_rp {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <9 10>;
            timeout-ms = <18>;
            require-prior-idle-ms = <150>;
        };

        combo_lb {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <20 21>;
            timeout-ms = <18>;
            require-prior-idle-ms = <150>;
        };

        combo_rb {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <21 22>;
            timeout-ms = <18>;
            require-prior-idle-ms = <150>;
        };

        combo_lc {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <32 33>;
            timeout-ms = <18>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        combo_rc {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <33 34>;
            timeout-ms = <18>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        combo_comma {
            bindings = <&kp COMMA>;
            key-positions = <32 31>;
            timeout-ms = <18>;
            require-prior-idle-ms = <150>;
        };

        combo_dot {
            bindings = <&kp DOT>;
            key-positions = <33 32>;
            timeout-ms = <18>;
            require-prior-idle-ms = <150>;
            layers = <2>;
        };

        combo_redo {
            bindings = <&kp LC(Y)>;
            key-positions = <12 13>;
            timeout-ms = <18>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        combo_equals {
            bindings = <&kp EQUAL>;
            key-positions = <19 20>;
            timeout-ms = <18>;
            require-prior-idle-ms = <150>;
        };

        combo_close {
            bindings = <&kp LC(W)>;
            key-positions = <3 2>;
            timeout-ms = <18>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        combo_quit {
            bindings = <&kp LC(Q)>;
            key-positions = <2 1>;
            timeout-ms = <18>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        combo_return {
            bindings = <&kp RETURN>;
            key-positions = <38 37>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        colemak_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB           &kp Q                 &kp W                 &kp F                 &kp P              &kp B                        &kp J                                 &kp L          &kp U                  &kp Y             &kp SEMICOLON  &kp BSPC
&kp DELETE        &kp A                 &hrml LEFT_GUI R      &hrml LEFT_ALT S      &hrml LCTRL T      &kp G                        &kp M                                 &hrmr RCTRL N  &hrml LEFT_ALT E       &hrmr LEFT_GUI I  &kp O          &kp SQT
&mt LSHFT ESCAPE  &hrml LS(LEFT_GUI) Z  &hrml LS(LEFT_GUI) X  &hrml LS(LEFT_ALT) C  &hrml LS(LCTRL) D  &kp V                        &kp K                                 &kp H          &hrmr RIGHT_ALT COMMA  &kp DOT           &kp FSLH       &mt LEFT_SHIFT RET
                                                              &kp LGUI              &lt 1 UNDER        &tmtl LS(LA(LCTRL)) SPACE    &tmtr LS(LA(LC(LEFT_GUI))) BACKSPACE  &mo 2          &kp DOUBLE_QUOTES
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TILDE   &kp EXCLAMATION  &kp AT_SIGN       &kp HASH                 &kp DOLLAR     &kp PERCENT         &kp CARET           &kp AMPERSAND   &kp ASTERISK    &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp BSPC
&kp DELETE  &kp LSHIFT       &kp LEFT_GUI      &kp LEFT_ALT             &kp LCTRL      &kp LEFT_BRACKET    &kp RIGHT_BRACKET   &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW          &kp RIGHT              &trans
&kp LSHFT   &kp LS(LCTRL)    &kp LS(LEFT_GUI)  &kp LS(LC(PRINTSCREEN))  &kp LS(LCTRL)  &kp LEFT_BRACE      &kp RIGHT_BRACE     &kp HOME        &kp PAGE_DOWN   &kp PAGE_UP           &kp END                &kp RETURN
                                               &kp LGUI                 &trans         &kp SPACE           &kp K_CONTEXT_MENU  &mo 2           &kp RALT
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TILDE       &kp F1   &kp F2   &kp F3    &kp F4   &kp F5       &kp EQUAL  &kp N7        &kp N8        &kp N9        &kp NON_US_BACKSLASH  &kp BACKSPACE
&kp LCTRL       &kp F6   &kp F7   &kp F8    &kp F9   &kp F10      &kp MINUS  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp ASTERISK          &kp GRAVE
&kp LEFT_SHIFT  &kp F11  &kp F12  &kp F13   &kp F14  &kp F15      &kp PLUS   &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp SLASH             &kp PIPE
                                  &kp LGUI  &mo 1    &kp SPACE    &kp RET    &trans        &kp NUMBER_0
            >;
        };

        tri_layer {
            bindings = <
&bt BT_CLR      &bt BT_SEL 0    &bt BT_SEL 1  &bt BT_SEL 3  &kp PRINTSCREEN  &trans    &trans             &trans            &trans  &trans   &trans  &trans
&kp KP_NUM      &kp CAPSLOCK    &kp LEFT_GUI  &kp LEFT_ALT  &kp LCTRL        &trans    &kp C_MUTE         &kp C_PLAY_PAUSE  &trans  &kp INS  &trans  &trans
&kp LEFT_SHIFT  &kp SCROLLLOCK  &trans        &trans        &trans           &trans    &kp C_VOLUME_DOWN  &kp C_VOLUME_UP   &trans  &trans   &trans  &kp RETURN
                                              &trans        &trans           &trans    &trans             &trans            &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
